{"version":3,"sources":["assets/script/framework/adapter/abstract/Manager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ScrollAdapter } from './ScrollAdapter';\nconst { ccclass, property } = cc._decorator;\ninterface IResult {\n    params: any[]\n    return: any\n}\ninterface EventInfo {\n    callback: Function\n    target: any\n    once: boolean\n}\nexport interface IParams {\n    [key: number | string]: IResult\n}\n@ccclass('Manager')\nexport abstract class Manager<TEvent extends number | string = any, TParams extends IParams = any> {\n    private _inited: boolean = false\n    private _eventMap: Map<TEvent, EventInfo[]> = new Map()\n\n    private _adapter: ScrollAdapter | null = null\n    get adapter() { return this._adapter }\n\n    protected abstract onInit(): void\n\n    /** @deprecated å†…éƒ¨æ–¹æ³•ï¼Œè°ƒç”¨ä¼šçˆ†ç‚¸ðŸ’¥ */\n    public internal_create(adapter: ScrollAdapter) {\n        this._adapter = adapter\n    }\n    /** @deprecated å†…éƒ¨æ–¹æ³•ï¼Œè°ƒç”¨ä¼šçˆ†ç‚¸ðŸ’¥ */\n    public internal_init() {\n        if (this._inited) return\n        this._inited = true\n        this.onInit()\n    }\n    public on(event: TEvent, callback: (...params: TParams[TEvent][\"params\"]) => TParams[TEvent][\"return\"], target: any, once = false) {\n        if (!this._eventMap.has(event)) {\n            this._eventMap.set(event, [])\n        }\n        var list = this._eventMap.get(event)\n        if (list && list.find(info => info.target == target && info.callback == callback)) {\n            return\n        }\n        list.push({ callback, target, once })\n    }\n    public off(event: TEvent, callback: any, target: any) {\n        if (!this._eventMap.has(event)) {\n            return\n        }\n        var list = this._eventMap.get(event)\n        var index = list && list.findIndex(info => info.callback == callback && info.target == target)\n        if (index == -1) return\n        list.splice(index, 1)\n    }\n    public emit<M extends TEvent, N extends keyof TParams[M]>(event: M, ...params: TParams[M][\"params\"]): void {\n        if (!this._eventMap.has(event)) {\n            return\n        }\n        var list = this._eventMap.get(event)\n        for (let i = 0; i < list.length; i++) {\n            const info = list[i];\n            info.callback.call(info.target, ...params)\n            if (info.once) {\n                list.splice(i, 1)\n                i--\n            }\n        }\n    }\n}\n\n"]}