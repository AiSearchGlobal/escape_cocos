{"version":3,"sources":["assets/script/framework/manager/PoolMng.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAA;QACI,aAAQ,GAAmC,EAAE,CAAA;QAC7C,eAAU,GAAkC,EAAE,CAAA;QA8F9C,+BAA+B;QAC/B,yCAAyC;QACzC,IAAI;IACR,CAAC;gBAnGY,OAAO;IAMhB,sBAAW,mBAAQ;aAAnB;YACI,IAAI,IAAI,CAAC,SAAS,EAAE;gBAChB,OAAO,IAAI,CAAC,SAAS,CAAC;aACzB;YAED,IAAI,CAAC,SAAS,GAAG,IAAI,SAAO,EAAE,CAAC;YAC/B,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED;;OAEG;IACH,yBAAO,GAAP,UAAS,MAAiB,EAAE,MAAe;QACvC,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;QAC/B,IAAI,IAAa,CAAC;QAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YACpC,UAAU;YACV,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBACjB,IAAI,GAAG,IAAI,CAAC,GAAG,EAAG,CAAC;aACtB;iBAAM;gBACH,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;aACjC;SACJ;aAAM;YACH,cAAc;YACd,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAE3B,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,kDAAkD;IAClD,wBAAwB;IACxB,yBAAyB;IACzB,gDAAgD;IAChD,qBAAqB;IACrB,0CAA0C;IAC1C,iCAAiC;IACjC,kCAAkC;IAClC,mBAAmB;IACnB,6CAA6C;IAC7C,YAAY;IACZ,eAAe;IACf,yBAAyB;IACzB,wCAAwC;IACxC,sCAAsC;IAEtC,yCAAyC;IACzC,QAAQ;IAER,4BAA4B;IAC5B,mBAAmB;IACnB,IAAI;IAEJ;;OAEG;IACH,yBAAO,GAAP,UAAS,IAAa;QAClB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,IAAI,IAAI,GAAgB,IAAI,CAAC;QAC7B,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YACpC,UAAU;YACV,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC9B;aAAM;YACH,cAAc;YACd,IAAI,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;SAC9B;QAED,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,2BAAS,GAAT,UAAW,IAAY;QACnB,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YACpC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,CAAC,KAAK,EAAE,CAAC;SAChB;IACL,CAAC;;IA9FQ,OAAO;QADnB,OAAO,CAAC,SAAS,CAAC;OACN,OAAO,CAmGnB;IAAD,cAAC;CAnGD,AAmGC,IAAA;AAnGY,0BAAO","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass(\"poolMng\")\nexport class PoolMng {\n    dictPool: { [name: string]: cc.NodePool }= {}\n    dictPrefab: { [name: string]: cc.Prefab } = {}\n\n    static _instance: PoolMng;\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new PoolMng();\n        return this._instance;\n    }\n\n    /**\n     * 根据预设从对象池中获取对应节点\n     */\n    getNode (prefab: cc.Prefab, parent: cc.Node) {\n        let name = prefab.data.name;\n        this.dictPrefab[name] = prefab;\n        let node: cc.Node;\n        if (this.dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            let pool = this.dictPool[name];\n            if (pool.size() > 0) {\n                node = pool.get()!;\n            } else {\n                node = cc.instantiate(prefab);\n            }\n        } else {\n            //没有对应对象池，创建他！\n            let pool = new cc.NodePool();\n            this.dictPool[name] = pool;\n\n            node = cc.instantiate(prefab);\n        }\n\n        node.parent = parent;\n        return node;\n    }\n\n    /**\n     * 根据预设从对象池中获取对应节点\n     */\n    // getSpineNode (_name: string, parent: cc.Node) {\n    //     let name = _name;\n    //     let node: cc.Node;\n    //     if (this.dictPool.hasOwnProperty(name)) {\n    //         //已有对应的对象池\n    //         let pool = this.dictPool[name];\n    //         if (pool.size() > 0) {\n    //             node = pool.get()!;\n    //         } else {\n    //             node = cc.instantiate(prefab);\n    //         }\n    //     } else {\n    //         //没有对应对象池，创建他！\n    //         let pool = new cc.NodePool();\n    //         this.dictPool[name] = pool;\n\n    //         node = cc.instantiate(prefab);\n    //     }\n\n    //     node.parent = parent;\n    //     return node;\n    // }\n\n    /**\n     * 将对应节点放回对象池中\n     */\n    putNode (node: cc.Node) {\n        let name = node.name;\n        let pool: cc.NodePool = null;\n        if (this.dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            pool = this.dictPool[name];\n        } else {\n            //没有对应对象池，创建他！\n            pool = new cc.NodePool();\n            this.dictPool[name] = pool;\n        }\n\n        pool.put(node);\n    }\n\n    /**\n     * 根据名称，清除对应对象池\n     */\n    clearPool (name: string) {\n        if (this.dictPool.hasOwnProperty(name)) {\n            let pool = this.dictPool[name];\n            pool.clear();\n        }\n    }\n\n    // update (deltaTime: number) {\n    //     // Your update function goes here.\n    // }\n}\n"]}