{"version":3,"sources":["assets/script/framework/lib/JSBridgeManager.ts"],"names":[],"mappings":";;;;;;;AAIA;IAUI;QACI,mBAAmB;QACnB,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACxD,CAAC;IAVM,2BAAW,GAAlB;QACI,IAAG,eAAe,CAAC,SAAS,IAAI,IAAI,EAAC;YACjC,eAAe,CAAC,SAAS,GAAG,IAAI,eAAe,EAAE,CAAA;SACpD;QACD,OAAO,IAAI,CAAC,SAAS,CAAA;IACzB,CAAC;IAOD;;;;;OAKG;IACH,sCAAY,GAAZ,UAAa,MAAc,EAAE,IAAc;QACvC,IAAG,MAAM,CAAC,UAAU,CAAC,EAAC;YAClB,MAAM,CAAC,UAAU,CAAC,CAAC,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SAC3D;aAAI;YACD,QAAQ,CAAC,gBAAgB,CACrB,eAAe,EACd;gBACG,MAAM,CAAC,aAAa,CAAC,CAAC,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC9D,CAAC,EACD,KAAK,CAAC,CAAC;SACf;IACL,CAAC;IAEA;;;;;;;;;;;;MAYE;IACH,yCAAe,GAAf,UAAgB,MAAa,EAAE,MAAO,EAAE,WAAqB;QACzD,IAAI,MAAM,CAAC,UAAU,CAAC,EAAC;YACnB,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAA;SAClE;IACL,CAAC;IAED;;;;OAIG;IACH,yCAAe,GAAf,UAAgB,MAAM,EAAE,YAAqB;QACzC,mEAAmE;IACvE,CAAC;IACL,sBAAC;AAAD,CA7DA,AA6DC,IAAA;AA7Da,0CAAe","file":"","sourceRoot":"/","sourcesContent":["import { GameEvent } from \"../../userData/EventConst\";\nimport { Log } from \"../../utils/Log\";\nimport EventMng from \"../manager/EventMng\";\n\nexport  class JSBridgeManager  {\n    private static _instance:JSBridgeManager;\n \n    static getInstance():JSBridgeManager{\n        if(JSBridgeManager._instance == null){\n            JSBridgeManager._instance = new JSBridgeManager()\n        }\n        return this._instance\n    }\n\n    constructor() {\n        //注册可以供flutter调用的方法\n        this.registerFunc(\"callBack\", this.callFromFlutter);\n    }\n \n    /**\n     * 注册可以供flutter调用的方法\n     * @param method 注册的方法名称\n     * @param func 注册的方法(example: function(params, responseCall) params:flutter返回的参数 responseCall:回传数据时调用)\n     *  在回调中如果有对creator ui操作要用event事件派发,否则会操作失败\n     */\n    registerFunc(method: string, func: Function){\n        if(window['jsBridge']){\n            window['jsBridge'].registerFuncForFlutter(method, func);\n        }else{\n            document.addEventListener(\n                \"jsBridgeReady\",\n                 function() {\n                    window['jsWebBridge'].registerFuncForFlutter(method, func);\n                 },\n                 false);\n        }\n    }\n\n     /**\n     * js调用flutter方法\n     * @param method 方法名\n     * @param params 参数\n     * @param receiveCall 接收flutter返回的数据函数(在回调中如果有对creator ui操作的行为要用event事件派发)\n     * \n     * example: JSBridgeManager.getInstance().callFlutterFunc('getCocosParams',{\n                    data1:'xxx',\n                    data2: 'xxxx'\n                },()=>{\n                    Log.log(\"********调用flutter成功********\")\n                })\n     */\n    callFlutterFunc(method:string, params?, receiveCall?:Function){\n        if (window['jsBridge']){\n            window['jsBridge'].callFlutterFunc(method, params, receiveCall)\n        }\n    }\n\n    /**\n     * flutter调用js方法,通过事件派发\n     * @param params \n     * @param responseCall \n     */\n    callFromFlutter(params, responseCall:Function){\n        // EventMng.emit(GameEvent.CALL_FROM_FLUTTER, params, responseCall)\n    }\n}\n"]}