{"version":3,"sources":["assets/script/framework/model/IDataModel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,uDAAkD;AAClD,uCAAsC;AACtC,gDAA2C;AAC3C,2CAAsC;AAEtC;IAAwC,8BAAU;IAC9C,oBAAY,SAAqB;QAArB,0BAAA,EAAA,qBAAqB;QAAjC,YACI,kBAAM,SAAS,CAAC,SAEnB;QADG,KAAI,CAAC,iBAAiB,EAAE,CAAC;;IAC7B,CAAC;IAED,0BAAK,GAAL;IAEA,CAAC;IAED;;OAEG;IACK,sCAAiB,GAAzB;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;gCAC5B,GAAG;YACV,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC3B,kBAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,UAAU,GAAG;oBACrC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAA;aACL;;QALL,KAAK,IAAM,GAAG,IAAI,KAAK;oBAAZ,GAAG;SAMb;IACL,CAAC;IAED;;OAEG;IACH,wCAAmB,GAAnB;QACI,OAAO,EAAE,CAAC;IACd,CAAC;IAAA,CAAC;IAEF,gCAAW,GAAX,UAAY,GAAG,EAAC,GAAG,EAAC,QAAQ,EAAC,MAAqB;QAArB,uBAAA,EAAA,aAAqB;QAC9C,IAAI;YACA,wBAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAC,GAAG,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;SAC7D;QAAC,OAAO,CAAC,EAAE;YACR,SAAG,CAAC,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;SACxC;IACL,CAAC;IAED,gCAAW,GAAX,UAAY,GAAG,EAAC,GAAG,EAAC,QAAS,EAAC,MAAqB;QAArB,uBAAA,EAAA,aAAqB;QAC/C,IAAI;YACA,wBAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAC,GAAG,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;SAC7D;QAAC,OAAO,CAAC,EAAE;YACR,SAAG,CAAC,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;SACxC;IACL,CAAC;IAED,kCAAa,GAAb,UAAc,CAAS,EAAE,CAAS,EAAE,IAAS;QACzC,IAAI;YACA,wBAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;SAC1C;QAAC,OAAO,CAAC,EAAE;YACR,SAAG,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACxC;IACL,CAAC;IACL,iBAAC;AAAD,CAtDA,AAsDC,CAtDuC,oBAAU,GAsDjD","file":"","sourceRoot":"/","sourcesContent":["import GameController from \"../../GameController\";\nimport { Log } from \"../../utils/Log\";\nimport EventMng from \"../manager/EventMng\";\nimport ISerialize from \"./ISerialize\";\n\nexport default class IDataModel extends ISerialize {\n    constructor(modelName = 'default') {\n        super(modelName);\n        this.registerListeners();\n    }\n\n    clear() {\n\n    }\n\n    /**\n     * 注册网络监听事件\n     */\n    private registerListeners() {\n        let tbMsg = this.getMessageListeners();\n        for (const key in tbMsg) {\n            if (tbMsg.hasOwnProperty(key)) {\n                EventMng.on(key.toString(), function (msg) {\n                    tbMsg[key](msg);\n                })\n            }\n        }\n    }\n\n    /**\n     * 子类需要重写此方法，返回需要注册的监听事件\n     */\n    getMessageListeners() {\n        return {};\n    };\n\n    postHttpMsg(cmd,msg,callback,loding:boolean = true) {\n        try {\n            GameController.network.httpPost(cmd,msg,callback, loding);\n        } catch (e) {\n            Log.error('send http proto', msg, e);\n        }\n    }\n\n    sendHttpMsg(cmd,msg,callback?,loding:boolean = true) {\n        try {\n            GameController.network.httpSend(cmd,msg,callback, loding);\n        } catch (e) {\n            Log.error('send http proto', msg, e);\n        }\n    }\n\n    sendSocketMsg(c: string, m: string, data: any) {\n        try {\n            GameController.socket.send(c, m, data);\n        } catch (e) {\n            Log.error('send socket proto', m, e);\n        }\n    }\n}\n"]}